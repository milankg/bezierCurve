// Generated by CoffeeScript 1.7.1
(function() {
  this.BezierCurve = (function() {
    function BezierCurve(points, canvas, totalPointsX, totalPointsY) {
      var bezierWidth, deepLevel, initialPoints, inputPoint, point, realX, realY, _i, _len;
      this.canvasBackgroundColor = '#FFF';
      this.pointColor = '#333';
      this.animationTime = 10000;
      this.ctx = canvas[0].getContext('2d');
      this.canvasWidth = canvas.width();
      this.canvasHeight = canvas.height();
      this.titleBezierCurve = "~ Bezier Curve ~";
      bezierWidth = this.ctx.measureText(this.titleBezierCurve).width;
      this.titleBezierCurveLeft = (this.canvasWidth - bezierWidth) / 2;
      this.titleBezierCurveTop = 10;
      initialPoints = [];
      deepLevel = 0;
      for (_i = 0, _len = points.length; _i < _len; _i++) {
        inputPoint = points[_i];
        realX = inputPoint.x * this.canvasWidth / totalPointsX;
        realY = this.canvasHeight - inputPoint.y * this.canvasHeight / totalPointsY;
        point = new BezierCurvePoint(realX, realY, this, deepLevel);
        initialPoints.push(point);
      }
      this.allPoints = initialPoints.concat(this._generatePoints(initialPoints, deepLevel + 1));
      this.allPoints[this.allPoints.length - 1].main = true;
      this.bezierCurvePath = [];
    }

    BezierCurve.prototype.addBezierCurvePoint = function(pointX, pointY) {
      return this.bezierCurvePath.push({
        x: pointX,
        y: pointY
      });
    };

    BezierCurve.prototype._generatePoints = function(currentPoints, deepLevel) {
      var i, nestedPoints, newPoint, newPoints, point;
      if (currentPoints.length === 1) {
        return [];
      }
      newPoints = [];
      i = 0;
      while (i < currentPoints.length - 1) {
        point = currentPoints[i];
        newPoint = new BezierCurvePoint(point.x, point.y, this, deepLevel);
        newPoint.movable = true;
        newPoint.between(currentPoints[i], currentPoints[i + 1]);
        newPoints.push(newPoint);
        i = i + 1;
      }
      nestedPoints = this._generatePoints(newPoints, deepLevel + 1);
      return newPoints.concat(nestedPoints);
    };

    BezierCurve.prototype.play = function() {
      this.animationStartTime = new Date().getTime();
      this.animationEndTime = this.animationStartTime + this.animationTime;
      return window.requestAnimationFrame(this._draw.bind(this));
    };

    BezierCurve.prototype._draw = function() {
      var bezierCurvePoint, delta, deltaInMillis, now, point, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      now = new Date().getTime();
      deltaInMillis = now - this.animationStartTime;
      if (deltaInMillis > 0) {
        delta = deltaInMillis / this.animationTime;
        this.ctx.fillStyle = this.canvasBackgroundColor;
        this.ctx.fillRect(0, 0, this.canvasWidth, this.canvasHeight);
        _ref = this.allPoints;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          point = _ref[_i];
          point.drawLines(delta);
        }
        _ref1 = this.allPoints;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          point = _ref1[_j];
          point.drawPoint(delta);
        }
        _ref2 = this.bezierCurvePath;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          bezierCurvePoint = _ref2[_k];
          this.ctx.beginPath();
          this.ctx.fillStyle = 'red';
          this.ctx.arc(bezierCurvePoint.x, bezierCurvePoint.y, 1, 0, Math.PI * 2);
          this.ctx.closePath();
          this.ctx.fill();
        }
        this.ctx.fillStyle = 'black';
        this.ctx.fillText(this.titleBezierCurve, this.titleBezierCurveLeft, this.titleBezierCurveTop);
      }
      if (now > this.animationEndTime) {
        console.log('Stop');
        return;
      }
      return window.requestAnimationFrame(this._draw.bind(this));
    };

    return BezierCurve;

  })();

  this.BezierCurvePoint = (function() {
    function BezierCurvePoint(x, y, parentBezierCurve, deepLevel) {
      this.x = x;
      this.y = y;
      this.parentBezierCurve = parentBezierCurve;
      this.deepLevel = deepLevel;
      this.movable = false;
      this.main = false;
      this.fromPoint1 = null;
      this.fromPoint2 = null;
      this.ctx = parentBezierCurve.ctx;
      this.pointColor = parentBezierCurve.pointColor;
    }

    BezierCurvePoint.prototype.between = function(point1, point2) {
      this.fromPoint1 = point1;
      return this.fromPoint2 = point2;
    };

    BezierCurvePoint.prototype.drawLines = function(delta) {
      var lineColor, lineWidth;
      if (this.movable) {
        lineWidth = 1;
        if (this.deepLevel === 1) {
          lineColor = '#666';
        } else {
          if (this.deepLevel % 2 === 0) {
            lineColor = 'silver';
          } else {
            lineColor = '#66CCFF';
          }
        }
        this.ctx.beginPath();
        this.ctx.lineWidth = lineWidth;
        this.ctx.strokeStyle = lineColor;
        this.ctx.moveTo(this.fromPoint1.x, this.fromPoint1.y);
        this.ctx.lineTo(this.fromPoint2.x, this.fromPoint2.y);
        return this.ctx.stroke();
      }
    };

    BezierCurvePoint.prototype.drawPoint = function(delta) {
      var color, pointSize;
      if (this.movable) {
        this.x = this.fromPoint1.x + ((this.fromPoint2.x - this.fromPoint1.x) * delta);
        this.y = this.fromPoint1.y + ((this.fromPoint2.y - this.fromPoint1.y) * delta);
      }
      if (this.main) {
        this.parentBezierCurve.addBezierCurvePoint(this.x, this.y);
      }
      if (this.main) {
        color = 'red';
        pointSize = 6;
      } else {
        color = this.pointColor;
        pointSize = 2;
      }
      this.ctx.beginPath();
      this.ctx.fillStyle = color;
      this.ctx.arc(this.x, this.y, pointSize, 0, Math.PI * 2);
      this.ctx.closePath();
      return this.ctx.fill();
    };

    return BezierCurvePoint;

  })();

}).call(this);
